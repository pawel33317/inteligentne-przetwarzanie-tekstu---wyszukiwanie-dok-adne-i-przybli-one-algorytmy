package zad4;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.omg.Messaging.SyncScopeHelper;

public class Main {

	public static char wejscie[];
	public static List<String> listaWzorcow;
	public static final Charset CHARSET = Charset.forName("ISO-8859-1");
	public static final boolean DEBUG = true;
	public static final String FILE_DNA = "dna";
	public static final String FILE_ENGLISH = "english";
	public static final String FILE_PROTEINS = "proteins";
	public static final String FILE_MAIN = ".prepared";
	public static final String FILE_PATTERN4 = "_pattern_4";
	public static final String FILE_PATTERN4REV = "_pattern_rev4";
	public static final String FILE_PATTERN8 = "_pattern_8";
	public static final String FILE_PATTERN8REV = "_pattern_rev8";
	public static final String FILE_PATTERN16 = "_pattern_16";
	public static final String FILE_PATTERN16REV = "_pattern_rev16";
	public static final String FILE_PATTERN32 = "_pattern_32";
	public static final String FILE_PATTERN32REV = "_pattern_rev32";
	public static final String FILE_PATTERN1024 = "_pattern_1024";
	public static final String FILE_PATTERN1024REV = "_pattern_rev1024";
	public static final String FILE_DEBUG = "aaa";
	public static final int ASIZE = 1024;

	public static void main(String[] args) throws IOException {
		if (DEBUG) {
			System.out.println("START");
			System.out.println("Wczytujê pliki");
		}

		wejscie = readFile("dna.prepared").toCharArray();
		listaWzorcow = readLines("dna_pattern_4");

		if (DEBUG) {
			wejscie = readFile("aaa.prepared").toCharArray();
			listaWzorcow = readLines("aaa_pattern_4");
			System.out.println("Wczyta³em pliki");
			System.out.println("Robiê obiekty sufiksów");
		}
		sufix suffuxTable[] = new sufix[wejscie.length];
		for (int i = 0; i < wejscie.length; i++) {
			suffuxTable[i] = new sufix(i);
		}

		if (DEBUG) {
			System.out.println("Zrobi³em obiekty sufixów");
			for (int i = 0; i < wejscie.length; i++) {
				System.out.println(String.valueOf(wejscie)
						.substring(suffuxTable[i].value, wejscie.length));
			}
			System.out.println("Zaczynam sortowanie");
		}

		Arrays.sort(suffuxTable);

		if (DEBUG) {
			System.out.println("Skoñczy³em sortowanie");
			System.out.println("Poszukujê wzorców");
			for (int i = 0; i < wejscie.length; i++) {
				System.out.println(i + "-->" + String.valueOf(wejscie)
						.substring(suffuxTable[i].value, wejscie.length));
			}
		}
		int iloscTrafien = 0;
		for (String pattern : listaWzorcow) {
		System.out.println(pattern);
			System.out.println(pattern);
			// zaczynamy szukaæ od pocz¹tku do koñca i co iteracje zmniejszamy
			// zakres o po³owê
			int startSearch = 0;
			int stopSearch = wejscie.length - 1;
			// aktualne miejsce poszukiwania to œrodek zakresu
			int currentSearch = (stopSearch + startSearch) / 2;
			int previousCurrentSearch = 0;

			// je¿eli aktualne miejsce wyszukiwania i poprzedenie s¹ takie same
			// to znaczy, ¿e nie znaleziono i stanê³o w miejscu
			while (previousCurrentSearch != currentSearch) {
			
				// ograniczenie porównywania liter je¿eli ci¹g wzorca wiêkszy od
				// porównywanego tekstu
				int ileLiterSprawdzicMaksymalnie = ileLiterSprawdzicMaksymalnieFun(
						pattern.length(), suffuxTable[currentSearch].value);
				int wynikPorownania = czyWzorzecJestRowny(pattern,
						ileLiterSprawdzicMaksymalnie,
						suffuxTable[currentSearch].value);
				// Trafienie
				if (wynikPorownania == 0) {
					iloscTrafien++;
					// SprawdŸ czy kolejne elementy w tablicy te¿ nie zawieraj¹
					// tego podci¹gu
					int tmpCurrentSearch = currentSearch + 1;
					int tmp2CurrentSearch = currentSearch - 1;
					while (tmpCurrentSearch < wejscie.length
							&& czyWzorzecJestRowny(pattern,
									ileLiterSprawdzicMaksymalnieFun(
											pattern.length(),
											suffuxTable[tmpCurrentSearch].value),
									suffuxTable[tmpCurrentSearch].value) == 0) {
						iloscTrafien++;
						tmpCurrentSearch++;
					}
					while (tmp2CurrentSearch >= 0 && czyWzorzecJestRowny(
							pattern,
							ileLiterSprawdzicMaksymalnieFun(pattern.length(),
									suffuxTable[tmp2CurrentSearch].value),
							suffuxTable[tmp2CurrentSearch].value) == 0) {
						iloscTrafien++;
						tmp2CurrentSearch--;
					}
					break;
				}
				// zagnie¿d¿a o po³owê
				else if (wynikPorownania == 1)
					startSearch = currentSearch;
				else
					stopSearch = currentSearch;

				previousCurrentSearch = currentSearch;
				currentSearch = (stopSearch + startSearch) / 2;
			}
			// BRAK TRAFIENIA

		}
		System.out.println("Iloœæ trafieñ: " + iloscTrafien);
		if (DEBUG)
			System.out.println("KONIEC PROGRAMU");
	}

	/*
	 * Sprzwdza tyle liter ile ma wzorzec lub wszystkie litery od danego indeksu
	 * je¿eli jest ich mniej ni¿ d³ugoœæ wzorca
	 */
	public static int ileLiterSprawdzicMaksymalnieFun(int dlugoscWzorca,
			int indexPozycjiWciaguDoPoszukiwan) {
		int ileLiterSprawdzicMaksymalnie = dlugoscWzorca - 1;
		if (czyWzorzecJestDluzszyOdTekstu(ileLiterSprawdzicMaksymalnie,
				indexPozycjiWciaguDoPoszukiwan))
			ileLiterSprawdzicMaksymalnie = wejscie.length
					- indexPozycjiWciaguDoPoszukiwan;
		return ileLiterSprawdzicMaksymalnie;
	}

	public static boolean czyWzorzecJestDluzszyOdTekstu(int dlugoscWzorca,
			int startTekstu) {
		if (wejscie.length - startTekstu < dlugoscWzorca)
			return true;
		return false;
	}

	/**
	 * Czy wzorzec jest wiêkszy mniejszy lub równy np aa<bg<z -1 mniejszy 0
	 * równy 1 wiêkszy
	 */
	public static int czyWzorzecJestRowny(String wzorzec,
			int dlugoscSprawdzania, int pozycjaWtekscie) {
		for (int i = 0; i <= dlugoscSprawdzania; i++) {
			if (wzorzec.charAt(i) > wejscie[pozycjaWtekscie + i])
				return 1;
			if (wzorzec.charAt(i) < wejscie[pozycjaWtekscie + i])
				return -1;
		}
		return 0;
	}

	/**
	 * klasa s³u¿y do porównywania czêœci tablicy char[] z inn¹ jej czêœci¹[]
	 * gdzie value okreœla miejsce od którego zaczyna siê porównanie
	 */
	public static class sufix implements Comparable<sufix> {
		public int value;

		public sufix(int a) {
			value = a;
		}

		@Override
		public int compareTo(sufix s) {
			for (int i = this.value, i2 = s.value; i < wejscie.length - 1
					&& i2 < wejscie.length - 1; i++, i2++) {
				if (wejscie[i] == wejscie[i2])
					continue;
				if (wejscie[i] < wejscie[i2])
					return -1;
				else
					return 1;
			}
			if (this.value < s.value)
				return 1;
			else
				return -1;
		}
	}

	public static String readFile(String fileName) throws IOException {
		List<String> lines = Files.readAllLines(Paths.get(fileName), CHARSET);
		StringBuilder sb = new StringBuilder();
		for (String s : lines) {
			sb.append(s);
		}
		return sb.toString();
	}

	public static List<String> readLines(String filename) throws IOException {
		return Files.readAllLines(Paths.get(filename), CHARSET);
	}


}
